/**
 *
 *  Client.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Client.h"
#include "ClientGrantType.h"
#include "ClientResponseType.h"
#include "ClientScope.h"
#include "RedirectUri.h"
#include "Token.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::auth_server;

const std::string Client::Cols::_client_id = "\"client_id\"";
const std::string Client::Cols::_client_secret = "\"client_secret\"";
const std::string Client::Cols::_client_id_created_at = "\"client_id_created_at\"";
const std::string Client::Cols::_client_id_expires_at = "\"client_id_expires_at\"";
const std::string Client::Cols::_client_name = "\"client_name\"";
const std::string Client::Cols::_client_uri = "\"client_uri\"";
const std::string Client::Cols::_registration_client_uri = "\"registration_client_uri\"";
const std::string Client::Cols::_registration_access_token = "\"registration_access_token\"";
const std::string Client::primaryKeyName = "client_id";
const bool Client::hasPrimaryKey = true;
const std::string Client::tableName = "\"client\"";

const std::vector<typename Client::MetaData> Client::metaData_={
{"client_id","std::string","character varying",128,0,1,1},
{"client_secret","std::string","character varying",128,0,0,1},
{"client_id_created_at","::trantor::Date","date",0,0,0,0},
{"client_id_expires_at","::trantor::Date","date",0,0,0,0},
{"client_name","std::string","character varying",128,0,0,0},
{"client_uri","std::string","character varying",128,0,0,0},
{"registration_client_uri","std::string","text",0,0,0,0},
{"registration_access_token","std::string","text",0,0,0,0}
};
const std::string &Client::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Client::Client(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["client_id"].isNull())
        {
            clientId_=std::make_shared<std::string>(r["client_id"].as<std::string>());
        }
        if(!r["client_secret"].isNull())
        {
            clientSecret_=std::make_shared<std::string>(r["client_secret"].as<std::string>());
        }
        if(!r["client_id_created_at"].isNull())
        {
            auto daysStr = r["client_id_created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdCreatedAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["client_id_expires_at"].isNull())
        {
            auto daysStr = r["client_id_expires_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdExpiresAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["client_name"].isNull())
        {
            clientName_=std::make_shared<std::string>(r["client_name"].as<std::string>());
        }
        if(!r["client_uri"].isNull())
        {
            clientUri_=std::make_shared<std::string>(r["client_uri"].as<std::string>());
        }
        if(!r["registration_client_uri"].isNull())
        {
            registrationClientUri_=std::make_shared<std::string>(r["registration_client_uri"].as<std::string>());
        }
        if(!r["registration_access_token"].isNull())
        {
            registrationAccessToken_=std::make_shared<std::string>(r["registration_access_token"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            clientId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            clientSecret_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdCreatedAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdExpiresAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            clientName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            clientUri_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            registrationClientUri_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            registrationAccessToken_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Client::Client(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            clientId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            clientSecret_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdCreatedAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdExpiresAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            clientName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            clientUri_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            registrationClientUri_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            registrationAccessToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}

Client::Client(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("client_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["client_id"].isNull())
        {
            clientId_=std::make_shared<std::string>(pJson["client_id"].asString());
        }
    }
    if(pJson.isMember("client_secret"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["client_secret"].isNull())
        {
            clientSecret_=std::make_shared<std::string>(pJson["client_secret"].asString());
        }
    }
    if(pJson.isMember("client_id_created_at"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["client_id_created_at"].isNull())
        {
            auto daysStr = pJson["client_id_created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdCreatedAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("client_id_expires_at"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["client_id_expires_at"].isNull())
        {
            auto daysStr = pJson["client_id_expires_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdExpiresAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("client_name"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["client_name"].isNull())
        {
            clientName_=std::make_shared<std::string>(pJson["client_name"].asString());
        }
    }
    if(pJson.isMember("client_uri"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["client_uri"].isNull())
        {
            clientUri_=std::make_shared<std::string>(pJson["client_uri"].asString());
        }
    }
    if(pJson.isMember("registration_client_uri"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["registration_client_uri"].isNull())
        {
            registrationClientUri_=std::make_shared<std::string>(pJson["registration_client_uri"].asString());
        }
    }
    if(pJson.isMember("registration_access_token"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["registration_access_token"].isNull())
        {
            registrationAccessToken_=std::make_shared<std::string>(pJson["registration_access_token"].asString());
        }
    }
}

void Client::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            clientId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            clientSecret_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdCreatedAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[3]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdExpiresAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            clientName_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            clientUri_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            registrationClientUri_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            registrationAccessToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
}

void Client::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("client_id"))
    {
        if(!pJson["client_id"].isNull())
        {
            clientId_=std::make_shared<std::string>(pJson["client_id"].asString());
        }
    }
    if(pJson.isMember("client_secret"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["client_secret"].isNull())
        {
            clientSecret_=std::make_shared<std::string>(pJson["client_secret"].asString());
        }
    }
    if(pJson.isMember("client_id_created_at"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["client_id_created_at"].isNull())
        {
            auto daysStr = pJson["client_id_created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdCreatedAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("client_id_expires_at"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["client_id_expires_at"].isNull())
        {
            auto daysStr = pJson["client_id_expires_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            clientIdExpiresAt_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("client_name"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["client_name"].isNull())
        {
            clientName_=std::make_shared<std::string>(pJson["client_name"].asString());
        }
    }
    if(pJson.isMember("client_uri"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["client_uri"].isNull())
        {
            clientUri_=std::make_shared<std::string>(pJson["client_uri"].asString());
        }
    }
    if(pJson.isMember("registration_client_uri"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["registration_client_uri"].isNull())
        {
            registrationClientUri_=std::make_shared<std::string>(pJson["registration_client_uri"].asString());
        }
    }
    if(pJson.isMember("registration_access_token"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["registration_access_token"].isNull())
        {
            registrationAccessToken_=std::make_shared<std::string>(pJson["registration_access_token"].asString());
        }
    }
}

const std::string &Client::getValueOfClientId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(clientId_)
        return *clientId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Client::getClientId() const noexcept
{
    return clientId_;
}
void Client::setClientId(const std::string &pClientId) noexcept
{
    clientId_ = std::make_shared<std::string>(pClientId);
    dirtyFlag_[0] = true;
}
void Client::setClientId(std::string &&pClientId) noexcept
{
    clientId_ = std::make_shared<std::string>(std::move(pClientId));
    dirtyFlag_[0] = true;
}
const typename Client::PrimaryKeyType & Client::getPrimaryKey() const
{
    assert(clientId_);
    return *clientId_;
}

const std::string &Client::getValueOfClientSecret() const noexcept
{
    static const std::string defaultValue = std::string();
    if(clientSecret_)
        return *clientSecret_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Client::getClientSecret() const noexcept
{
    return clientSecret_;
}
void Client::setClientSecret(const std::string &pClientSecret) noexcept
{
    clientSecret_ = std::make_shared<std::string>(pClientSecret);
    dirtyFlag_[1] = true;
}
void Client::setClientSecret(std::string &&pClientSecret) noexcept
{
    clientSecret_ = std::make_shared<std::string>(std::move(pClientSecret));
    dirtyFlag_[1] = true;
}

const ::trantor::Date &Client::getValueOfClientIdCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(clientIdCreatedAt_)
        return *clientIdCreatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Client::getClientIdCreatedAt() const noexcept
{
    return clientIdCreatedAt_;
}
void Client::setClientIdCreatedAt(const ::trantor::Date &pClientIdCreatedAt) noexcept
{
    clientIdCreatedAt_ = std::make_shared<::trantor::Date>(pClientIdCreatedAt.roundDay());
    dirtyFlag_[2] = true;
}
void Client::setClientIdCreatedAtToNull() noexcept
{
    clientIdCreatedAt_.reset();
    dirtyFlag_[2] = true;
}

const ::trantor::Date &Client::getValueOfClientIdExpiresAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(clientIdExpiresAt_)
        return *clientIdExpiresAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Client::getClientIdExpiresAt() const noexcept
{
    return clientIdExpiresAt_;
}
void Client::setClientIdExpiresAt(const ::trantor::Date &pClientIdExpiresAt) noexcept
{
    clientIdExpiresAt_ = std::make_shared<::trantor::Date>(pClientIdExpiresAt.roundDay());
    dirtyFlag_[3] = true;
}
void Client::setClientIdExpiresAtToNull() noexcept
{
    clientIdExpiresAt_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Client::getValueOfClientName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(clientName_)
        return *clientName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Client::getClientName() const noexcept
{
    return clientName_;
}
void Client::setClientName(const std::string &pClientName) noexcept
{
    clientName_ = std::make_shared<std::string>(pClientName);
    dirtyFlag_[4] = true;
}
void Client::setClientName(std::string &&pClientName) noexcept
{
    clientName_ = std::make_shared<std::string>(std::move(pClientName));
    dirtyFlag_[4] = true;
}
void Client::setClientNameToNull() noexcept
{
    clientName_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Client::getValueOfClientUri() const noexcept
{
    static const std::string defaultValue = std::string();
    if(clientUri_)
        return *clientUri_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Client::getClientUri() const noexcept
{
    return clientUri_;
}
void Client::setClientUri(const std::string &pClientUri) noexcept
{
    clientUri_ = std::make_shared<std::string>(pClientUri);
    dirtyFlag_[5] = true;
}
void Client::setClientUri(std::string &&pClientUri) noexcept
{
    clientUri_ = std::make_shared<std::string>(std::move(pClientUri));
    dirtyFlag_[5] = true;
}
void Client::setClientUriToNull() noexcept
{
    clientUri_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Client::getValueOfRegistrationClientUri() const noexcept
{
    static const std::string defaultValue = std::string();
    if(registrationClientUri_)
        return *registrationClientUri_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Client::getRegistrationClientUri() const noexcept
{
    return registrationClientUri_;
}
void Client::setRegistrationClientUri(const std::string &pRegistrationClientUri) noexcept
{
    registrationClientUri_ = std::make_shared<std::string>(pRegistrationClientUri);
    dirtyFlag_[6] = true;
}
void Client::setRegistrationClientUri(std::string &&pRegistrationClientUri) noexcept
{
    registrationClientUri_ = std::make_shared<std::string>(std::move(pRegistrationClientUri));
    dirtyFlag_[6] = true;
}
void Client::setRegistrationClientUriToNull() noexcept
{
    registrationClientUri_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Client::getValueOfRegistrationAccessToken() const noexcept
{
    static const std::string defaultValue = std::string();
    if(registrationAccessToken_)
        return *registrationAccessToken_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Client::getRegistrationAccessToken() const noexcept
{
    return registrationAccessToken_;
}
void Client::setRegistrationAccessToken(const std::string &pRegistrationAccessToken) noexcept
{
    registrationAccessToken_ = std::make_shared<std::string>(pRegistrationAccessToken);
    dirtyFlag_[7] = true;
}
void Client::setRegistrationAccessToken(std::string &&pRegistrationAccessToken) noexcept
{
    registrationAccessToken_ = std::make_shared<std::string>(std::move(pRegistrationAccessToken));
    dirtyFlag_[7] = true;
}
void Client::setRegistrationAccessTokenToNull() noexcept
{
    registrationAccessToken_.reset();
    dirtyFlag_[7] = true;
}

void Client::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Client::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "client_id",
        "client_secret",
        "client_id_created_at",
        "client_id_expires_at",
        "client_name",
        "client_uri",
        "registration_client_uri",
        "registration_access_token"
    };
    return inCols;
}

void Client::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getClientId())
        {
            binder << getValueOfClientId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getClientSecret())
        {
            binder << getValueOfClientSecret();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getClientIdCreatedAt())
        {
            binder << getValueOfClientIdCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getClientIdExpiresAt())
        {
            binder << getValueOfClientIdExpiresAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getClientName())
        {
            binder << getValueOfClientName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getClientUri())
        {
            binder << getValueOfClientUri();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRegistrationClientUri())
        {
            binder << getValueOfRegistrationClientUri();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRegistrationAccessToken())
        {
            binder << getValueOfRegistrationAccessToken();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Client::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Client::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getClientId())
        {
            binder << getValueOfClientId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getClientSecret())
        {
            binder << getValueOfClientSecret();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getClientIdCreatedAt())
        {
            binder << getValueOfClientIdCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getClientIdExpiresAt())
        {
            binder << getValueOfClientIdExpiresAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getClientName())
        {
            binder << getValueOfClientName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getClientUri())
        {
            binder << getValueOfClientUri();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getRegistrationClientUri())
        {
            binder << getValueOfRegistrationClientUri();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getRegistrationAccessToken())
        {
            binder << getValueOfRegistrationAccessToken();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Client::toJson() const
{
    Json::Value ret;
    if(getClientId())
    {
        ret["client_id"]=getValueOfClientId();
    }
    else
    {
        ret["client_id"]=Json::Value();
    }
    if(getClientSecret())
    {
        ret["client_secret"]=getValueOfClientSecret();
    }
    else
    {
        ret["client_secret"]=Json::Value();
    }
    if(getClientIdCreatedAt())
    {
        ret["client_id_created_at"]=getClientIdCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["client_id_created_at"]=Json::Value();
    }
    if(getClientIdExpiresAt())
    {
        ret["client_id_expires_at"]=getClientIdExpiresAt()->toDbStringLocal();
    }
    else
    {
        ret["client_id_expires_at"]=Json::Value();
    }
    if(getClientName())
    {
        ret["client_name"]=getValueOfClientName();
    }
    else
    {
        ret["client_name"]=Json::Value();
    }
    if(getClientUri())
    {
        ret["client_uri"]=getValueOfClientUri();
    }
    else
    {
        ret["client_uri"]=Json::Value();
    }
    if(getRegistrationClientUri())
    {
        ret["registration_client_uri"]=getValueOfRegistrationClientUri();
    }
    else
    {
        ret["registration_client_uri"]=Json::Value();
    }
    if(getRegistrationAccessToken())
    {
        ret["registration_access_token"]=getValueOfRegistrationAccessToken();
    }
    else
    {
        ret["registration_access_token"]=Json::Value();
    }
    return ret;
}

Json::Value Client::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 8)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getClientId())
            {
                ret[pMasqueradingVector[0]]=getValueOfClientId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getClientSecret())
            {
                ret[pMasqueradingVector[1]]=getValueOfClientSecret();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getClientIdCreatedAt())
            {
                ret[pMasqueradingVector[2]]=getClientIdCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getClientIdExpiresAt())
            {
                ret[pMasqueradingVector[3]]=getClientIdExpiresAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getClientName())
            {
                ret[pMasqueradingVector[4]]=getValueOfClientName();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getClientUri())
            {
                ret[pMasqueradingVector[5]]=getValueOfClientUri();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getRegistrationClientUri())
            {
                ret[pMasqueradingVector[6]]=getValueOfRegistrationClientUri();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getRegistrationAccessToken())
            {
                ret[pMasqueradingVector[7]]=getValueOfRegistrationAccessToken();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getClientId())
    {
        ret["client_id"]=getValueOfClientId();
    }
    else
    {
        ret["client_id"]=Json::Value();
    }
    if(getClientSecret())
    {
        ret["client_secret"]=getValueOfClientSecret();
    }
    else
    {
        ret["client_secret"]=Json::Value();
    }
    if(getClientIdCreatedAt())
    {
        ret["client_id_created_at"]=getClientIdCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["client_id_created_at"]=Json::Value();
    }
    if(getClientIdExpiresAt())
    {
        ret["client_id_expires_at"]=getClientIdExpiresAt()->toDbStringLocal();
    }
    else
    {
        ret["client_id_expires_at"]=Json::Value();
    }
    if(getClientName())
    {
        ret["client_name"]=getValueOfClientName();
    }
    else
    {
        ret["client_name"]=Json::Value();
    }
    if(getClientUri())
    {
        ret["client_uri"]=getValueOfClientUri();
    }
    else
    {
        ret["client_uri"]=Json::Value();
    }
    if(getRegistrationClientUri())
    {
        ret["registration_client_uri"]=getValueOfRegistrationClientUri();
    }
    else
    {
        ret["registration_client_uri"]=Json::Value();
    }
    if(getRegistrationAccessToken())
    {
        ret["registration_access_token"]=getValueOfRegistrationAccessToken();
    }
    else
    {
        ret["registration_access_token"]=Json::Value();
    }
    return ret;
}

bool Client::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("client_id"))
    {
        if(!validJsonOfField(0, "client_id", pJson["client_id"], err, true))
            return false;
    }
    else
    {
        err="The client_id column cannot be null";
        return false;
    }
    if(pJson.isMember("client_secret"))
    {
        if(!validJsonOfField(1, "client_secret", pJson["client_secret"], err, true))
            return false;
    }
    else
    {
        err="The client_secret column cannot be null";
        return false;
    }
    if(pJson.isMember("client_id_created_at"))
    {
        if(!validJsonOfField(2, "client_id_created_at", pJson["client_id_created_at"], err, true))
            return false;
    }
    if(pJson.isMember("client_id_expires_at"))
    {
        if(!validJsonOfField(3, "client_id_expires_at", pJson["client_id_expires_at"], err, true))
            return false;
    }
    if(pJson.isMember("client_name"))
    {
        if(!validJsonOfField(4, "client_name", pJson["client_name"], err, true))
            return false;
    }
    if(pJson.isMember("client_uri"))
    {
        if(!validJsonOfField(5, "client_uri", pJson["client_uri"], err, true))
            return false;
    }
    if(pJson.isMember("registration_client_uri"))
    {
        if(!validJsonOfField(6, "registration_client_uri", pJson["registration_client_uri"], err, true))
            return false;
    }
    if(pJson.isMember("registration_access_token"))
    {
        if(!validJsonOfField(7, "registration_access_token", pJson["registration_access_token"], err, true))
            return false;
    }
    return true;
}
bool Client::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Client::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("client_id"))
    {
        if(!validJsonOfField(0, "client_id", pJson["client_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("client_secret"))
    {
        if(!validJsonOfField(1, "client_secret", pJson["client_secret"], err, false))
            return false;
    }
    if(pJson.isMember("client_id_created_at"))
    {
        if(!validJsonOfField(2, "client_id_created_at", pJson["client_id_created_at"], err, false))
            return false;
    }
    if(pJson.isMember("client_id_expires_at"))
    {
        if(!validJsonOfField(3, "client_id_expires_at", pJson["client_id_expires_at"], err, false))
            return false;
    }
    if(pJson.isMember("client_name"))
    {
        if(!validJsonOfField(4, "client_name", pJson["client_name"], err, false))
            return false;
    }
    if(pJson.isMember("client_uri"))
    {
        if(!validJsonOfField(5, "client_uri", pJson["client_uri"], err, false))
            return false;
    }
    if(pJson.isMember("registration_client_uri"))
    {
        if(!validJsonOfField(6, "registration_client_uri", pJson["registration_client_uri"], err, false))
            return false;
    }
    if(pJson.isMember("registration_access_token"))
    {
        if(!validJsonOfField(7, "registration_access_token", pJson["registration_access_token"], err, false))
            return false;
    }
    return true;
}
bool Client::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Client::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<ClientGrantType> Client::getGrantType(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from client_grant_type where client_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *clientId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<ClientGrantType> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(ClientGrantType(row));
    }
    return ret;
}

void Client::getGrantType(const DbClientPtr &clientPtr,
                          const std::function<void(std::vector<ClientGrantType>)> &rcb,
                          const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from client_grant_type where client_id = $1";
    *clientPtr << sql
               << *clientId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<ClientGrantType> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(ClientGrantType(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<ClientResponseType> Client::getResponseType(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from client_response_type where client_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *clientId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<ClientResponseType> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(ClientResponseType(row));
    }
    return ret;
}

void Client::getResponseType(const DbClientPtr &clientPtr,
                             const std::function<void(std::vector<ClientResponseType>)> &rcb,
                             const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from client_response_type where client_id = $1";
    *clientPtr << sql
               << *clientId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<ClientResponseType> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(ClientResponseType(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<ClientScope> Client::getScope(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from client_scope where client_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *clientId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<ClientScope> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(ClientScope(row));
    }
    return ret;
}

void Client::getScope(const DbClientPtr &clientPtr,
                      const std::function<void(std::vector<ClientScope>)> &rcb,
                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from client_scope where client_id = $1";
    *clientPtr << sql
               << *clientId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<ClientScope> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(ClientScope(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<RedirectUri> Client::getRedirectUri(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from redirect_uri where client_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *clientId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<RedirectUri> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(RedirectUri(row));
    }
    return ret;
}

void Client::getRedirectUri(const DbClientPtr &clientPtr,
                            const std::function<void(std::vector<RedirectUri>)> &rcb,
                            const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from redirect_uri where client_id = $1";
    *clientPtr << sql
               << *clientId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<RedirectUri> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(RedirectUri(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<Token> Client::getToken(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from token where client_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *clientId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<Token> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(Token(row));
    }
    return ret;
}

void Client::getToken(const DbClientPtr &clientPtr,
                      const std::function<void(std::vector<Token>)> &rcb,
                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from token where client_id = $1";
    *clientPtr << sql
               << *clientId_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Token> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Token(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
