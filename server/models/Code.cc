/**
 *
 *  Code.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Code.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::auth_server;

const std::string Code::Cols::_code = "\"code\"";
const std::string Code::Cols::_query = "\"query\"";
const std::string Code::Cols::_scope = "\"scope\"";
const std::string Code::primaryKeyName = "code";
const bool Code::hasPrimaryKey = true;
const std::string Code::tableName = "\"code\"";

const std::vector<typename Code::MetaData> Code::metaData_={
{"code","std::string","character varying",64,0,1,1},
{"query","std::string","text",0,0,0,0},
{"scope","std::string","ARRAY",0,0,0,0}
};
const std::string &Code::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Code::Code(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["code"].isNull())
        {
            code_=std::make_shared<std::string>(r["code"].as<std::string>());
        }
        if(!r["query"].isNull())
        {
            query_=std::make_shared<std::string>(r["query"].as<std::string>());
        }
        if(!r["scope"].isNull())
        {
            scope_=std::make_shared<std::string>(r["scope"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            code_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            query_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            scope_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Code::Code(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            code_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            query_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            scope_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

Code::Code(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("code"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["code"].isNull())
        {
            code_=std::make_shared<std::string>(pJson["code"].asString());
        }
    }
    if(pJson.isMember("query"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["query"].isNull())
        {
            query_=std::make_shared<std::string>(pJson["query"].asString());
        }
    }
    if(pJson.isMember("scope"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["scope"].isNull())
        {
            scope_=std::make_shared<std::string>(pJson["scope"].asString());
        }
    }
}

void Code::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            code_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            query_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            scope_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void Code::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("code"))
    {
        if(!pJson["code"].isNull())
        {
            code_=std::make_shared<std::string>(pJson["code"].asString());
        }
    }
    if(pJson.isMember("query"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["query"].isNull())
        {
            query_=std::make_shared<std::string>(pJson["query"].asString());
        }
    }
    if(pJson.isMember("scope"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["scope"].isNull())
        {
            scope_=std::make_shared<std::string>(pJson["scope"].asString());
        }
    }
}

const std::string &Code::getValueOfCode() const noexcept
{
    static const std::string defaultValue = std::string();
    if(code_)
        return *code_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Code::getCode() const noexcept
{
    return code_;
}
void Code::setCode(const std::string &pCode) noexcept
{
    code_ = std::make_shared<std::string>(pCode);
    dirtyFlag_[0] = true;
}
void Code::setCode(std::string &&pCode) noexcept
{
    code_ = std::make_shared<std::string>(std::move(pCode));
    dirtyFlag_[0] = true;
}
const typename Code::PrimaryKeyType & Code::getPrimaryKey() const
{
    assert(code_);
    return *code_;
}

const std::string &Code::getValueOfQuery() const noexcept
{
    static const std::string defaultValue = std::string();
    if(query_)
        return *query_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Code::getQuery() const noexcept
{
    return query_;
}
void Code::setQuery(const std::string &pQuery) noexcept
{
    query_ = std::make_shared<std::string>(pQuery);
    dirtyFlag_[1] = true;
}
void Code::setQuery(std::string &&pQuery) noexcept
{
    query_ = std::make_shared<std::string>(std::move(pQuery));
    dirtyFlag_[1] = true;
}
void Code::setQueryToNull() noexcept
{
    query_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Code::getValueOfScope() const noexcept
{
    static const std::string defaultValue = std::string();
    if(scope_)
        return *scope_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Code::getScope() const noexcept
{
    return scope_;
}
void Code::setScope(const std::string &pScope) noexcept
{
    scope_ = std::make_shared<std::string>(pScope);
    dirtyFlag_[2] = true;
}
void Code::setScope(std::string &&pScope) noexcept
{
    scope_ = std::make_shared<std::string>(std::move(pScope));
    dirtyFlag_[2] = true;
}
void Code::setScopeToNull() noexcept
{
    scope_.reset();
    dirtyFlag_[2] = true;
}

void Code::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Code::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "code",
        "query",
        "scope"
    };
    return inCols;
}

void Code::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getCode())
        {
            binder << getValueOfCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getQuery())
        {
            binder << getValueOfQuery();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getScope())
        {
            binder << getValueOfScope();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Code::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Code::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getCode())
        {
            binder << getValueOfCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getQuery())
        {
            binder << getValueOfQuery();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getScope())
        {
            binder << getValueOfScope();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Code::toJson() const
{
    Json::Value ret;
    if(getCode())
    {
        ret["code"]=getValueOfCode();
    }
    else
    {
        ret["code"]=Json::Value();
    }
    if(getQuery())
    {
        ret["query"]=getValueOfQuery();
    }
    else
    {
        ret["query"]=Json::Value();
    }
    if(getScope())
    {
        ret["scope"]=getValueOfScope();
    }
    else
    {
        ret["scope"]=Json::Value();
    }
    return ret;
}

Json::Value Code::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getCode())
            {
                ret[pMasqueradingVector[0]]=getValueOfCode();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getQuery())
            {
                ret[pMasqueradingVector[1]]=getValueOfQuery();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getScope())
            {
                ret[pMasqueradingVector[2]]=getValueOfScope();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getCode())
    {
        ret["code"]=getValueOfCode();
    }
    else
    {
        ret["code"]=Json::Value();
    }
    if(getQuery())
    {
        ret["query"]=getValueOfQuery();
    }
    else
    {
        ret["query"]=Json::Value();
    }
    if(getScope())
    {
        ret["scope"]=getValueOfScope();
    }
    else
    {
        ret["scope"]=Json::Value();
    }
    return ret;
}

bool Code::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("code"))
    {
        if(!validJsonOfField(0, "code", pJson["code"], err, true))
            return false;
    }
    else
    {
        err="The code column cannot be null";
        return false;
    }
    if(pJson.isMember("query"))
    {
        if(!validJsonOfField(1, "query", pJson["query"], err, true))
            return false;
    }
    if(pJson.isMember("scope"))
    {
        if(!validJsonOfField(2, "scope", pJson["scope"], err, true))
            return false;
    }
    return true;
}
bool Code::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Code::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("code"))
    {
        if(!validJsonOfField(0, "code", pJson["code"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("query"))
    {
        if(!validJsonOfField(1, "query", pJson["query"], err, false))
            return false;
    }
    if(pJson.isMember("scope"))
    {
        if(!validJsonOfField(2, "scope", pJson["scope"], err, false))
            return false;
    }
    return true;
}
bool Code::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Code::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 64)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 64)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
