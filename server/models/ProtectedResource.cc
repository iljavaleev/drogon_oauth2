/**
 *
 *  ProtectedResource.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ProtectedResource.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::auth_server;

const std::string ProtectedResource::Cols::_resource_id = "\"resource_id\"";
const std::string ProtectedResource::Cols::_resource_uri = "\"resource_uri\"";
const std::string ProtectedResource::primaryKeyName = "resource_id";
const bool ProtectedResource::hasPrimaryKey = true;
const std::string ProtectedResource::tableName = "\"protected_resource\"";

const std::vector<typename ProtectedResource::MetaData> ProtectedResource::metaData_={
{"resource_id","std::string","character varying",128,0,1,1},
{"resource_uri","std::string","text",0,0,0,0}
};
const std::string &ProtectedResource::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ProtectedResource::ProtectedResource(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["resource_id"].isNull())
        {
            resourceId_=std::make_shared<std::string>(r["resource_id"].as<std::string>());
        }
        if(!r["resource_uri"].isNull())
        {
            resourceUri_=std::make_shared<std::string>(r["resource_uri"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            resourceId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            resourceUri_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

ProtectedResource::ProtectedResource(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            resourceId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            resourceUri_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

ProtectedResource::ProtectedResource(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("resource_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["resource_id"].isNull())
        {
            resourceId_=std::make_shared<std::string>(pJson["resource_id"].asString());
        }
    }
    if(pJson.isMember("resource_uri"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["resource_uri"].isNull())
        {
            resourceUri_=std::make_shared<std::string>(pJson["resource_uri"].asString());
        }
    }
}

void ProtectedResource::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            resourceId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            resourceUri_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

void ProtectedResource::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("resource_id"))
    {
        if(!pJson["resource_id"].isNull())
        {
            resourceId_=std::make_shared<std::string>(pJson["resource_id"].asString());
        }
    }
    if(pJson.isMember("resource_uri"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["resource_uri"].isNull())
        {
            resourceUri_=std::make_shared<std::string>(pJson["resource_uri"].asString());
        }
    }
}

const std::string &ProtectedResource::getValueOfResourceId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(resourceId_)
        return *resourceId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProtectedResource::getResourceId() const noexcept
{
    return resourceId_;
}
void ProtectedResource::setResourceId(const std::string &pResourceId) noexcept
{
    resourceId_ = std::make_shared<std::string>(pResourceId);
    dirtyFlag_[0] = true;
}
void ProtectedResource::setResourceId(std::string &&pResourceId) noexcept
{
    resourceId_ = std::make_shared<std::string>(std::move(pResourceId));
    dirtyFlag_[0] = true;
}
const typename ProtectedResource::PrimaryKeyType & ProtectedResource::getPrimaryKey() const
{
    assert(resourceId_);
    return *resourceId_;
}

const std::string &ProtectedResource::getValueOfResourceUri() const noexcept
{
    static const std::string defaultValue = std::string();
    if(resourceUri_)
        return *resourceUri_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProtectedResource::getResourceUri() const noexcept
{
    return resourceUri_;
}
void ProtectedResource::setResourceUri(const std::string &pResourceUri) noexcept
{
    resourceUri_ = std::make_shared<std::string>(pResourceUri);
    dirtyFlag_[1] = true;
}
void ProtectedResource::setResourceUri(std::string &&pResourceUri) noexcept
{
    resourceUri_ = std::make_shared<std::string>(std::move(pResourceUri));
    dirtyFlag_[1] = true;
}
void ProtectedResource::setResourceUriToNull() noexcept
{
    resourceUri_.reset();
    dirtyFlag_[1] = true;
}

void ProtectedResource::updateId(const uint64_t id)
{
}

const std::vector<std::string> &ProtectedResource::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "resource_id",
        "resource_uri"
    };
    return inCols;
}

void ProtectedResource::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getResourceId())
        {
            binder << getValueOfResourceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getResourceUri())
        {
            binder << getValueOfResourceUri();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ProtectedResource::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void ProtectedResource::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getResourceId())
        {
            binder << getValueOfResourceId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getResourceUri())
        {
            binder << getValueOfResourceUri();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ProtectedResource::toJson() const
{
    Json::Value ret;
    if(getResourceId())
    {
        ret["resource_id"]=getValueOfResourceId();
    }
    else
    {
        ret["resource_id"]=Json::Value();
    }
    if(getResourceUri())
    {
        ret["resource_uri"]=getValueOfResourceUri();
    }
    else
    {
        ret["resource_uri"]=Json::Value();
    }
    return ret;
}

Json::Value ProtectedResource::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getResourceId())
            {
                ret[pMasqueradingVector[0]]=getValueOfResourceId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getResourceUri())
            {
                ret[pMasqueradingVector[1]]=getValueOfResourceUri();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getResourceId())
    {
        ret["resource_id"]=getValueOfResourceId();
    }
    else
    {
        ret["resource_id"]=Json::Value();
    }
    if(getResourceUri())
    {
        ret["resource_uri"]=getValueOfResourceUri();
    }
    else
    {
        ret["resource_uri"]=Json::Value();
    }
    return ret;
}

bool ProtectedResource::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("resource_id"))
    {
        if(!validJsonOfField(0, "resource_id", pJson["resource_id"], err, true))
            return false;
    }
    else
    {
        err="The resource_id column cannot be null";
        return false;
    }
    if(pJson.isMember("resource_uri"))
    {
        if(!validJsonOfField(1, "resource_uri", pJson["resource_uri"], err, true))
            return false;
    }
    return true;
}
bool ProtectedResource::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProtectedResource::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("resource_id"))
    {
        if(!validJsonOfField(0, "resource_id", pJson["resource_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("resource_uri"))
    {
        if(!validJsonOfField(1, "resource_uri", pJson["resource_uri"], err, false))
            return false;
    }
    return true;
}
bool ProtectedResource::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProtectedResource::validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson,
                                         std::string &err,
                                         bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
