//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "Index.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
#include <drogon/drogon.h> 
using namespace drogon;
std::string Index::genText(const DrTemplateData& Index_view_data)
{
	drogon::OStringStream Index_tmp_stream;
	std::string layoutName{""};
	Index_tmp_stream << "  ";
    auto clients=Index_view_data.get<Json::Value>("clients");    
  
	Index_tmp_stream << "  <head>\n";
	Index_tmp_stream << "    <meta charset=\"utf-8\">\n";
	Index_tmp_stream << "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n";
	Index_tmp_stream << "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n";
	Index_tmp_stream << "    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->\n";
	Index_tmp_stream << "    <title>OAuth in Action: OAuth Authorization Server</title>\n";
Index_tmp_stream<<"\n";
	Index_tmp_stream << "    <!-- Bootstrap -->\n";
	Index_tmp_stream << "	<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\">\n";
	Index_tmp_stream << "	<style>\n";
	Index_tmp_stream << "	body {\n";
	Index_tmp_stream << "	  padding-top: 60px;\n";
	Index_tmp_stream << "	}\n";
	Index_tmp_stream << "	.navbar-inverse {\n";
	Index_tmp_stream << "		background-color: #322;\n";
	Index_tmp_stream << "	}\n";
	Index_tmp_stream << "	</style>\n";
	Index_tmp_stream << "  </head>\n";
	Index_tmp_stream << "  <body>\n";
Index_tmp_stream<<"\n";
	Index_tmp_stream << "    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n";
	Index_tmp_stream << "      <div class=\"container\">\n";
	Index_tmp_stream << "        <div class=\"navbar-header\">\n";
	Index_tmp_stream << "          <a class=\"navbar-brand\" href=\"/\"><span class=\"label label-danger\">OAuth Authorization Server</span></a>\n";
	Index_tmp_stream << "        </div>\n";
	Index_tmp_stream << "      </div>\n";
	Index_tmp_stream << "    </nav>\n";
Index_tmp_stream<<"\n";
	Index_tmp_stream << "    <div class=\"container\">\n";
Index_tmp_stream<<"\n";
	Index_tmp_stream << "      <div class=\"jumbotron\">\n";
	Index_tmp_stream << "		  <h2>Client information:</h2>\n";
	Index_tmp_stream << "      ";
 for(auto client:clients){
	Index_tmp_stream << "        ";
 
          auto scopes = client["scope"];
          auto redirect_uris = client["redirect_uri"];
          auto response_types = client["response_type"];
          auto grant_types = client["grant_type"];
        
	Index_tmp_stream << "		  <ul>\n";
	Index_tmp_stream << "			  <li><b>client_id:</b> <code>";
Index_tmp_stream<<client["client_id"];
	Index_tmp_stream << "</code></li>\n";
	Index_tmp_stream << "			  <li><b>client_secret:</b> <code>";
Index_tmp_stream<<client["client_secret"];
	Index_tmp_stream << "</code></li>\n";
	Index_tmp_stream << "        <li><b>scope:</b> \n";
	Index_tmp_stream << "        ";
 for (auto s :scopes)
        {
	Index_tmp_stream << "            <code>";
Index_tmp_stream<<s;
	Index_tmp_stream << "</code>\n";
	Index_tmp_stream << "        ";
}
	Index_tmp_stream << "        </li>\n";
	Index_tmp_stream << "        <li><b>redirect_uri:</b> \n";
	Index_tmp_stream << "        ";
 for (auto u :redirect_uris)
        {
	Index_tmp_stream << "            <code>";
Index_tmp_stream<<u;
	Index_tmp_stream << "</code>\n";
	Index_tmp_stream << "        ";
}
	Index_tmp_stream << "        </li>		    \n";
	Index_tmp_stream << "        <li><b>client_uri:</b> <code>";
Index_tmp_stream<<client["client_uri"];
	Index_tmp_stream << "</code></li>\n";
	Index_tmp_stream << "        <li><b>client_id_created_at:</b> <code>";
Index_tmp_stream<<client["client_id_created_at"];
	Index_tmp_stream << "</code></li>\n";
	Index_tmp_stream << "			  <li><b>client_id_expires_at:</b> <code>";
Index_tmp_stream<<client["client_id_expires_at"];
	Index_tmp_stream << "</code></li>\n";
	Index_tmp_stream << "        <li><b>registration_access_token:</b> <code>";
Index_tmp_stream<<client["registration_access_token"];
	Index_tmp_stream << "</code></li>\n";
	Index_tmp_stream << "        <li><b>registration_client_uri:</b> <code>";
Index_tmp_stream<<client["registration_client_uri"];
	Index_tmp_stream << "</code></li>\n";
	Index_tmp_stream << "        <li><b>token_endpoint_auth_method:</b> <code>";
Index_tmp_stream<<client["token_endpoint_auth_method"];
	Index_tmp_stream << "</code></li>\n";
	Index_tmp_stream << "        <li><b>grant_types:</b> \n";
	Index_tmp_stream << "        ";
 for (auto gt :grant_types)
        {
	Index_tmp_stream << "            <code>";
Index_tmp_stream<<gt;
	Index_tmp_stream << "</code>\n";
	Index_tmp_stream << "        ";
}
	Index_tmp_stream << "        </li>\n";
	Index_tmp_stream << "        <li><b>response_types:</b> \n";
	Index_tmp_stream << "        ";
 for (auto rt :response_types)
        {
	Index_tmp_stream << "            <code>";
Index_tmp_stream<<rt;
	Index_tmp_stream << "</code>\n";
	Index_tmp_stream << "        ";
}
	Index_tmp_stream << "        </li>\n";
	Index_tmp_stream << "			  <li><b>client_name:</b> <code>";
Index_tmp_stream<<client["client_name"];
	Index_tmp_stream << "</code></li>\n";
	Index_tmp_stream << "		   </ul>\n";
	Index_tmp_stream << "		   ";
}
	Index_tmp_stream << "       <h2>Server information:</h2>\n";
	Index_tmp_stream << "       <ul>\n";
	Index_tmp_stream << "      </ul>\n";
	Index_tmp_stream << "    </div>\n";
	Index_tmp_stream << "    \n";
	Index_tmp_stream << "    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script>\n";
	Index_tmp_stream << "	<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"></script>\n";
	Index_tmp_stream << "  </body>\n";
	Index_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(Index_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = Index_view_data;
auto str = std::move(Index_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
