/**
 *
 *  Token.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Token.h"
#include "Client.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::client;

const std::string Token::Cols::_id = "\"id\"";
const std::string Token::Cols::_client_id = "\"client_id\"";
const std::string Token::Cols::_access_token = "\"access_token\"";
const std::string Token::Cols::_refresh_token = "\"refresh_token\"";
const std::string Token::Cols::_access_token_expire = "\"access_token_expire\"";
const std::string Token::Cols::_scope = "\"scope\"";
const std::string Token::primaryKeyName = "id";
const bool Token::hasPrimaryKey = true;
const std::string Token::tableName = "\"token\"";

const std::vector<typename Token::MetaData> Token::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"client_id","std::string","character varying",128,0,0,0},
{"access_token","std::string","text",0,0,0,0},
{"refresh_token","std::string","text",0,0,0,0},
{"access_token_expire","std::string","text",0,0,0,0},
{"scope","std::string","character varying",255,0,0,0}
};
const std::string &Token::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Token::Token(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["client_id"].isNull())
        {
            clientId_=std::make_shared<std::string>(r["client_id"].as<std::string>());
        }
        if(!r["access_token"].isNull())
        {
            accessToken_=std::make_shared<std::string>(r["access_token"].as<std::string>());
        }
        if(!r["refresh_token"].isNull())
        {
            refreshToken_=std::make_shared<std::string>(r["refresh_token"].as<std::string>());
        }
        if(!r["access_token_expire"].isNull())
        {
            accessTokenExpire_=std::make_shared<std::string>(r["access_token_expire"].as<std::string>());
        }
        if(!r["scope"].isNull())
        {
            scope_=std::make_shared<std::string>(r["scope"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            clientId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            accessToken_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            refreshToken_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            accessTokenExpire_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            scope_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Token::Token(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            clientId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            accessToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            refreshToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            accessTokenExpire_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            scope_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

Token::Token(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("client_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["client_id"].isNull())
        {
            clientId_=std::make_shared<std::string>(pJson["client_id"].asString());
        }
    }
    if(pJson.isMember("access_token"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["access_token"].isNull())
        {
            accessToken_=std::make_shared<std::string>(pJson["access_token"].asString());
        }
    }
    if(pJson.isMember("refresh_token"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["refresh_token"].isNull())
        {
            refreshToken_=std::make_shared<std::string>(pJson["refresh_token"].asString());
        }
    }
    if(pJson.isMember("access_token_expire"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["access_token_expire"].isNull())
        {
            accessTokenExpire_=std::make_shared<std::string>(pJson["access_token_expire"].asString());
        }
    }
    if(pJson.isMember("scope"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["scope"].isNull())
        {
            scope_=std::make_shared<std::string>(pJson["scope"].asString());
        }
    }
}

void Token::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            clientId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            accessToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            refreshToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            accessTokenExpire_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            scope_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
}

void Token::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("client_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["client_id"].isNull())
        {
            clientId_=std::make_shared<std::string>(pJson["client_id"].asString());
        }
    }
    if(pJson.isMember("access_token"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["access_token"].isNull())
        {
            accessToken_=std::make_shared<std::string>(pJson["access_token"].asString());
        }
    }
    if(pJson.isMember("refresh_token"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["refresh_token"].isNull())
        {
            refreshToken_=std::make_shared<std::string>(pJson["refresh_token"].asString());
        }
    }
    if(pJson.isMember("access_token_expire"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["access_token_expire"].isNull())
        {
            accessTokenExpire_=std::make_shared<std::string>(pJson["access_token_expire"].asString());
        }
    }
    if(pJson.isMember("scope"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["scope"].isNull())
        {
            scope_=std::make_shared<std::string>(pJson["scope"].asString());
        }
    }
}

const int32_t &Token::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Token::getId() const noexcept
{
    return id_;
}
void Token::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Token::PrimaryKeyType & Token::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Token::getValueOfClientId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(clientId_)
        return *clientId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Token::getClientId() const noexcept
{
    return clientId_;
}
void Token::setClientId(const std::string &pClientId) noexcept
{
    clientId_ = std::make_shared<std::string>(pClientId);
    dirtyFlag_[1] = true;
}
void Token::setClientId(std::string &&pClientId) noexcept
{
    clientId_ = std::make_shared<std::string>(std::move(pClientId));
    dirtyFlag_[1] = true;
}
void Token::setClientIdToNull() noexcept
{
    clientId_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Token::getValueOfAccessToken() const noexcept
{
    static const std::string defaultValue = std::string();
    if(accessToken_)
        return *accessToken_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Token::getAccessToken() const noexcept
{
    return accessToken_;
}
void Token::setAccessToken(const std::string &pAccessToken) noexcept
{
    accessToken_ = std::make_shared<std::string>(pAccessToken);
    dirtyFlag_[2] = true;
}
void Token::setAccessToken(std::string &&pAccessToken) noexcept
{
    accessToken_ = std::make_shared<std::string>(std::move(pAccessToken));
    dirtyFlag_[2] = true;
}
void Token::setAccessTokenToNull() noexcept
{
    accessToken_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Token::getValueOfRefreshToken() const noexcept
{
    static const std::string defaultValue = std::string();
    if(refreshToken_)
        return *refreshToken_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Token::getRefreshToken() const noexcept
{
    return refreshToken_;
}
void Token::setRefreshToken(const std::string &pRefreshToken) noexcept
{
    refreshToken_ = std::make_shared<std::string>(pRefreshToken);
    dirtyFlag_[3] = true;
}
void Token::setRefreshToken(std::string &&pRefreshToken) noexcept
{
    refreshToken_ = std::make_shared<std::string>(std::move(pRefreshToken));
    dirtyFlag_[3] = true;
}
void Token::setRefreshTokenToNull() noexcept
{
    refreshToken_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Token::getValueOfAccessTokenExpire() const noexcept
{
    static const std::string defaultValue = std::string();
    if(accessTokenExpire_)
        return *accessTokenExpire_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Token::getAccessTokenExpire() const noexcept
{
    return accessTokenExpire_;
}
void Token::setAccessTokenExpire(const std::string &pAccessTokenExpire) noexcept
{
    accessTokenExpire_ = std::make_shared<std::string>(pAccessTokenExpire);
    dirtyFlag_[4] = true;
}
void Token::setAccessTokenExpire(std::string &&pAccessTokenExpire) noexcept
{
    accessTokenExpire_ = std::make_shared<std::string>(std::move(pAccessTokenExpire));
    dirtyFlag_[4] = true;
}
void Token::setAccessTokenExpireToNull() noexcept
{
    accessTokenExpire_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Token::getValueOfScope() const noexcept
{
    static const std::string defaultValue = std::string();
    if(scope_)
        return *scope_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Token::getScope() const noexcept
{
    return scope_;
}
void Token::setScope(const std::string &pScope) noexcept
{
    scope_ = std::make_shared<std::string>(pScope);
    dirtyFlag_[5] = true;
}
void Token::setScope(std::string &&pScope) noexcept
{
    scope_ = std::make_shared<std::string>(std::move(pScope));
    dirtyFlag_[5] = true;
}
void Token::setScopeToNull() noexcept
{
    scope_.reset();
    dirtyFlag_[5] = true;
}

void Token::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Token::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "client_id",
        "access_token",
        "refresh_token",
        "access_token_expire",
        "scope"
    };
    return inCols;
}

void Token::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getClientId())
        {
            binder << getValueOfClientId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAccessToken())
        {
            binder << getValueOfAccessToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRefreshToken())
        {
            binder << getValueOfRefreshToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAccessTokenExpire())
        {
            binder << getValueOfAccessTokenExpire();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getScope())
        {
            binder << getValueOfScope();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Token::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Token::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getClientId())
        {
            binder << getValueOfClientId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAccessToken())
        {
            binder << getValueOfAccessToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRefreshToken())
        {
            binder << getValueOfRefreshToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAccessTokenExpire())
        {
            binder << getValueOfAccessTokenExpire();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getScope())
        {
            binder << getValueOfScope();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Token::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getClientId())
    {
        ret["client_id"]=getValueOfClientId();
    }
    else
    {
        ret["client_id"]=Json::Value();
    }
    if(getAccessToken())
    {
        ret["access_token"]=getValueOfAccessToken();
    }
    else
    {
        ret["access_token"]=Json::Value();
    }
    if(getRefreshToken())
    {
        ret["refresh_token"]=getValueOfRefreshToken();
    }
    else
    {
        ret["refresh_token"]=Json::Value();
    }
    if(getAccessTokenExpire())
    {
        ret["access_token_expire"]=getValueOfAccessTokenExpire();
    }
    else
    {
        ret["access_token_expire"]=Json::Value();
    }
    if(getScope())
    {
        ret["scope"]=getValueOfScope();
    }
    else
    {
        ret["scope"]=Json::Value();
    }
    return ret;
}

Json::Value Token::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getClientId())
            {
                ret[pMasqueradingVector[1]]=getValueOfClientId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAccessToken())
            {
                ret[pMasqueradingVector[2]]=getValueOfAccessToken();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRefreshToken())
            {
                ret[pMasqueradingVector[3]]=getValueOfRefreshToken();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getAccessTokenExpire())
            {
                ret[pMasqueradingVector[4]]=getValueOfAccessTokenExpire();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getScope())
            {
                ret[pMasqueradingVector[5]]=getValueOfScope();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getClientId())
    {
        ret["client_id"]=getValueOfClientId();
    }
    else
    {
        ret["client_id"]=Json::Value();
    }
    if(getAccessToken())
    {
        ret["access_token"]=getValueOfAccessToken();
    }
    else
    {
        ret["access_token"]=Json::Value();
    }
    if(getRefreshToken())
    {
        ret["refresh_token"]=getValueOfRefreshToken();
    }
    else
    {
        ret["refresh_token"]=Json::Value();
    }
    if(getAccessTokenExpire())
    {
        ret["access_token_expire"]=getValueOfAccessTokenExpire();
    }
    else
    {
        ret["access_token_expire"]=Json::Value();
    }
    if(getScope())
    {
        ret["scope"]=getValueOfScope();
    }
    else
    {
        ret["scope"]=Json::Value();
    }
    return ret;
}

bool Token::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("client_id"))
    {
        if(!validJsonOfField(1, "client_id", pJson["client_id"], err, true))
            return false;
    }
    if(pJson.isMember("access_token"))
    {
        if(!validJsonOfField(2, "access_token", pJson["access_token"], err, true))
            return false;
    }
    if(pJson.isMember("refresh_token"))
    {
        if(!validJsonOfField(3, "refresh_token", pJson["refresh_token"], err, true))
            return false;
    }
    if(pJson.isMember("access_token_expire"))
    {
        if(!validJsonOfField(4, "access_token_expire", pJson["access_token_expire"], err, true))
            return false;
    }
    if(pJson.isMember("scope"))
    {
        if(!validJsonOfField(5, "scope", pJson["scope"], err, true))
            return false;
    }
    return true;
}
bool Token::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Token::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("client_id"))
    {
        if(!validJsonOfField(1, "client_id", pJson["client_id"], err, false))
            return false;
    }
    if(pJson.isMember("access_token"))
    {
        if(!validJsonOfField(2, "access_token", pJson["access_token"], err, false))
            return false;
    }
    if(pJson.isMember("refresh_token"))
    {
        if(!validJsonOfField(3, "refresh_token", pJson["refresh_token"], err, false))
            return false;
    }
    if(pJson.isMember("access_token_expire"))
    {
        if(!validJsonOfField(4, "access_token_expire", pJson["access_token_expire"], err, false))
            return false;
    }
    if(pJson.isMember("scope"))
    {
        if(!validJsonOfField(5, "scope", pJson["scope"], err, false))
            return false;
    }
    return true;
}
bool Token::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Token::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Client Token::getClient(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from client where client_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *clientId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Client(r[0]);
}

void Token::getClient(const DbClientPtr &clientPtr,
                      const std::function<void(Client)> &rcb,
                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from client where client_id = $1";
    *clientPtr << sql
               << *clientId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Client(r[0]));
                    }
               }
               >> ecb;
}
